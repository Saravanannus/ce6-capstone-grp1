name: Build and Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      env_name:
        type: choice
        description: "Environment to deploy (dev)"
        options:
          - dev
          - prod

jobs:
  build:
    name: Build Docker image and push to ECR (prod)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Configure AWS credentials for Prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to ECR (prod)
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:latest .
          docker push $ECR_REGISTRY/${{ vars.ECR_REPOSITORY }} -a
          echo "image=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload image information as artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-info
          path: ./image-info.txt


  deploy_dev:
    name: Deploy to ECS (Dev)
    runs-on: ubuntu-latest
    needs: build
    environment: dev

    steps:
      - name: Download image information artifact
        uses: actions/download-artifact@v3
        with:
          name: image-info
          path: ./

      - name: Configure AWS credentials for Dev
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create new task definition for Dev
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME_DEV }}
          image: ${{ env.image }}

      - name: Deploy to ECS (Dev)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ vars.ECS_CLUSTER_DEV }}
          service: ${{ vars.ECS_SERVICE_DEV }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true


  deploy_prod:
    name: Deploy to ECS (Prod)
    runs-on: ubuntu-latest
    needs: deploy_dev
    environment: prod

    steps:
      - name: Download image information artifact
        uses: actions/download-artifact@v3
        with:
          name: image-info
          path: ./

      - name: Configure AWS credentials for Prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create new task definition for Prod
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.CONTAINER_NAME_PROD }}
          image: ${{ env.image }}

      - name: Deploy to ECS (Prod)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ vars.ECS_CLUSTER_PROD }}
          service: ${{ vars.ECS_SERVICE_PROD }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
